package class_2_biaoshifu;

public class JavaInteger07{

	public static void main(String[] args){
		//十进制:0  1 2 3 4 5 6 7 8 9====二进制 1010
		int a = -10;
		a = 100;
		//八进制 0 1 2 3 4 5 7 ,必须以0开头----
		int b = 013;
		//console(a);
		//console(b);

		
		//二进制转十进制,2位次幂乘以每个进制对应的数字相加等到结构
		//十进制转二进制，用十进制除以2的余数，从下往上拼接得到 能整除记0 不能就记1
		
		//十进制转八进制：用10除以8的余数从下往上拼接
		//二进制转八进制: 用分组法,每三个一组：从右往左 1 2 4排列。如
		//1   0  ===>  1  1  0  ===>   1 0 1
		//2	1  ===>  4  2  1  ===>   4 2 1
        // 2 =====>6 =====>5 == 265
		//10110101===八进制===
		//2   6   5
		//010	110 101  

		//十六进制,必须以0x或者0X开头,0-9 a-f,一组数字
		int cc = 0x89aed;
		//二转16
		//0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
		//0 1 2 3 4 5 6 7 8 9 a  b  c  d  e  f
		//1 ====   0 1 1 1  ====   0  1  1  0
		//1======  8 4 2 1  ====   8  4  2  1
		//1===7====6====0x176
		//console(cc);
		
		//10---->16
		/*
		 * 具体算法，例如65036化为16进制为多少？
		 * 除16取余数得最低1位，然后把商继续除得第2位，直到商等于0
			65036 除 16，余数 12(C)，商4064
			4064 除 16，余数 0(0)，商254
			254 除 16，余数 14(E)，商15
			15除16，余数 15(F)，商0，结束
			得16进制为 FE0C
		 * */
		
		//16----->10
		
		/*用位加权乘，积相加法比较简单。如8FFC035B转换为十进制(最低位是16^0，依次向左)：
		8FFC035B(16)=8x16^7+Fx16^6+Fx16^5+Cx16^4+0x16^3+3x16^2+5x16^1+Bx16^0
		=2147483648+15x16^6+15x16^5+12x16^4+0+768+80+11
		=2147483648+251658240+15728640+786432+768+80+11
		=2415657819(10)。*/

		//八进制，十进制，十六进制都是数字.


	}

	//打印方法
	public static void console(Object message){
		System.out.println("打印的结果是："+message);
	}
}
